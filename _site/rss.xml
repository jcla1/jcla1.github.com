<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jcla1.com</title>
    <link>http://jcla1.com/</link>
    <atom:link href="http://jcla1.com/rss.xml" rel="self" type="application/rss+xml" />
    <description>A blog about tech.</description>
    <language>en-us</language>
    <pubDate>Sun, 29 Jul 2012 20:25:20 +0200</pubDate>
    <lastBuildDate>Sun, 29 Jul 2012 20:25:20 +0200</lastBuildDate>

    
    <item>
      <title>Getting to work with CodeMirror</title>
      <link>http://jcla1.com/blog/2012/06/15/getting-to-work-with-codemirror</link>
      <pubDate>Fri, 15 Jun 2012 00:00:00 +0200</pubDate>
      <author>Joseph Adams (whitegolem@gmail.com)</author>
      <guid>http://jcla1.com/blog/2012/06/15/getting-to-work-with-codemirror</guid>
      <description>&lt;h1 id='getting_to_work_with_codemirror'&gt;Getting to work with CodeMirror&lt;/h1&gt;

&lt;p class='meta'&gt; 15 Jun 2012 - Krefeld, Germany&lt;/p&gt;

&lt;p&gt;Recently on &lt;a href='http://news.ycombinator.com/'&gt;Hackernews&lt;/a&gt; I found an interesting link. It pointed to &lt;a href='http://rubyfiddle.com/'&gt;RubyFiddle&lt;/a&gt;. The site is really nice, but my favourite bit was the editor. By then I had already guessed they hadn&amp;#8217;t done it themselves so I &lt;em&gt;investigated&lt;/em&gt; (looked in the source..) and found they&amp;#8217;re using &lt;a href='http://codemirror.net/'&gt;CodeMirror&lt;/a&gt;. I had heared about CodeMirror before but I never really liked online IDEs. But this editor &lt;strong&gt;really&lt;/strong&gt; caught my eye so I decided to try the most basic setup. Turns out, it&amp;#8217;s really simple! It&amp;#8217;s just 1, in words one, line of Javascript! (Plus basic HTML)&lt;/p&gt;
&lt;script src='https://gist.github.com/2938024.js?file=oneliner.js'&gt;
&lt;/script&gt;
&lt;p&gt;That is all that is needed. Thanks to Marijn Haverbeke for such a great online editor.&lt;/p&gt;

&lt;p&gt;Below is a screenshot of it with the HTML written in it.&lt;/p&gt;
&lt;img width='640' src='/img/codem.png' /&gt;</description>
    </item>
    
    <item>
      <title>Web Audio API overview (Part 2 of 2)</title>
      <link>http://jcla1.com/blog/2012/04/06/web-audio-api-overview-part2</link>
      <pubDate>Fri, 06 Apr 2012 00:00:00 +0200</pubDate>
      <author>Joseph Adams (whitegolem@gmail.com)</author>
      <guid>http://jcla1.com/blog/2012/04/06/web-audio-api-overview-part2</guid>
      <description>&lt;h1 id='web_audio_api_overview_part_2_of_2'&gt;Web Audio API overview (Part 2 of 2)&lt;/h1&gt;

&lt;p class='meta'&gt; 06 Apr 2012 - Manchester, England&lt;/p&gt;

&lt;p&gt;In the &lt;a href='/blog/2012/03/11/web-audio-api-overview-part1/'&gt;first part&lt;/a&gt;, we looked at the basics of the Web Audio API and using it to visualize music. In this second part I&amp;#8217;ll be showing you how to implement a LowPass Filter and gain control in our example from the first part. We&amp;#8217;ll add some colour to it too.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s start with the easiest bit, the color. To change the color of the bars, all you need to do is change &lt;code&gt;ctx.fillStyle = &quot;white&quot;;&lt;/code&gt; to whatever color. If you&amp;#8217;re like me, you won&amp;#8217;t like single color bars. I think those bars deserve a nice rainbow gradient. This is done very easily:&lt;/p&gt;
&lt;script src='https://gist.github.com/2015620.js?file=gradient.js'&gt;
&lt;/script&gt;
&lt;p&gt;And that&amp;#8217;s it now we&amp;#8217;ve a nice gradient.&lt;/p&gt;

&lt;p&gt;Next up, gain. You can create one just like an analyser:&lt;/p&gt;
&lt;script src='https://gist.github.com/2015620.js?file=gain_create.js'&gt;
&lt;/script&gt;
&lt;p&gt;Now we have a &lt;code&gt;GainNode&lt;/code&gt;, but no way for the user to interact with it.&lt;/p&gt;

&lt;p&gt;To give the user some control over the gain, we&amp;#8217;ll have a well-known input. &lt;script src='https://gist.github.com/2015620.js?file=gain.html'&gt;
&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The reason it has a max value of 1 is that the &lt;code&gt;GainNode&lt;/code&gt; by default sets this value (It is possible to change this). Of course an input alone doesn&amp;#8217;t do anything. We&amp;#8217;ll add an event listener to it:&lt;/p&gt;
&lt;script src='https://gist.github.com/2015620.js?file=gain_listener.js'&gt;
&lt;/script&gt;
&lt;p&gt;This snippet sets &lt;code&gt;gain.gain.value&lt;/code&gt; to the value on the input. And that is all there is to it.&lt;/p&gt;

&lt;p&gt;Adding a LowPass filter is the same procedure.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add an input box.&lt;/li&gt;

&lt;li&gt;Create the LowPass filter in Javascript.&lt;/li&gt;

&lt;li&gt;Add a binding between input and LowPass filter&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the source code:&lt;/p&gt;
&lt;script src='https://gist.github.com/2015620.js?file=filter.html'&gt;
&lt;/script&gt;
&lt;p&gt;In this short series I have demonstrated how easy it is to work with the Web Audio API. You now know how to create Audio nodes and change their effect on audio.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web Audio API overview (Part 1 of 2)</title>
      <link>http://jcla1.com/blog/2012/03/11/web-audio-api-overview-part1</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +0100</pubDate>
      <author>Joseph Adams (whitegolem@gmail.com)</author>
      <guid>http://jcla1.com/blog/2012/03/11/web-audio-api-overview-part1</guid>
      <description>&lt;h1 id='web_audio_api_overview_part_1_of_2'&gt;Web Audio API overview (Part 1 of 2)&lt;/h1&gt;

&lt;p class='meta'&gt; 11 Mar 2012 - Krefeld, Germany&lt;/p&gt;

&lt;p&gt;In the next 2 blog posts I&amp;#8217;ll be showing you some essential features of the Web Audio API. You can find its specification &lt;a href='https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html'&gt;here&lt;/a&gt;. The Web Audio API provides nearly all the functionality of a normal synthesizer, one of the reasons why it is so powerful.&lt;/p&gt;

&lt;p&gt;Anyway let&amp;#8217;s get going. I&amp;#8217;m going to talk you through the source of a little audio visualizer in this post and the next one. &lt;a href='/demos/web-audio-api/web-audio-overview-part2.html'&gt;Here is a demo of the final product.&lt;/a&gt; In this first post I&amp;#8217;ll concentrate on &lt;a href='/demos/web-audio-api/web-audio-overview-part1.html'&gt;a simplified version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING!&lt;/strong&gt; These demos will only work in up to date versions of Chrome! (currently 19+)&lt;/p&gt;

&lt;p&gt;Now let&amp;#8217;s look at the HTML body structure. In this case it is very simple, it has a main &lt;code&gt;#container&lt;/code&gt;, that (as the name says) contains a canvas and an audio element. After that there are a couple of script tags.&lt;/p&gt;
&lt;script src='https://gist.github.com/2015620.js?file=body.html'&gt;
&lt;/script&gt;
&lt;p&gt;You may already know what the contents of the first script tag are for. It is a shim by &lt;a href='http://paulirish.com'&gt;Paul Irish&lt;/a&gt; that makes it easier to use the &lt;code&gt;requestAnimationFrame()&lt;/code&gt; (To get more info read his &lt;a href='http://paulirish.com/2011/requestanimationframe-for-smart-animating/'&gt;blog post&lt;/a&gt;). I&amp;#8217;m not going to go further into how it works, but all it does &lt;em&gt;really&lt;/em&gt; is make user friendlier animations.&lt;/p&gt;

&lt;p&gt;The important parts for this blog post are the contents of the 2nd script tag:&lt;/p&gt;
&lt;script src='https://gist.github.com/2015620.js?file=main.js'&gt;
&lt;/script&gt;
&lt;p&gt;The &lt;code&gt;webkitAudioContext()&lt;/code&gt; created, is a context in which the audio interactions take place. Similar to the ones mentioned in my &lt;a href='/blog/2012/01/08/exploring-the-v8-js-engine-part-2/'&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You could divide it into 2 main parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The setup&lt;/li&gt;

&lt;li&gt;The animation&amp;#8217;s &lt;code&gt;draw&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h2 id='the_setup'&gt;The setup&lt;/h2&gt;

&lt;p&gt;sets up all the variables (except &amp;#8220;freqData&amp;#8221;) and provides information on how each bar drawn should look. The &lt;code&gt;init&lt;/code&gt; function connects the source of the audio (the audio element) with the analyzer and connects the analyzer with the destination. i.e. the speakers&lt;/p&gt;

&lt;p&gt;You can imagine connecting up &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;analyzer&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt; as taking a few plugs and plugging them in some hardware. The only difference is that this is virtual!&lt;/p&gt;

&lt;h2 id='the_animations__function'&gt;The animation&amp;#8217;s &lt;code&gt;draw&lt;/code&gt; function&lt;/h2&gt;

&lt;p&gt;takes care of drawing the bars.&lt;/p&gt;

&lt;p&gt;But what does that mean &lt;em&gt;exactly&lt;/em&gt;?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Call the &lt;code&gt;requestAnimFrame&lt;/code&gt; function to restart the animation at just the right time.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Create a typed array (called &lt;code&gt;freqData&lt;/code&gt;) for holding the individual frequencies. The parameter passed at creation is the size of the array (In this case &lt;code&gt;1024&lt;/code&gt; items).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Call a function on the analyzer to put the frequencies in &lt;code&gt;freqData&lt;/code&gt; (it doesn&amp;#8217;t return anything).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Simply clear the canvas.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Loop through all the frequency data (except that in the offset) and each time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get the current frequency&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Draw a bar that is as high as the frequency. The magnitude has to be negative here so that the bar is drawn in the correct direction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Lather. Rinse. Repeat.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Nearly everything that has to do with the Web Audio API inherits from an object called &lt;code&gt;AudioNode&lt;/code&gt;, which contains some basic structure for working with audio. For example the analyzer we are using here is also inherited from &lt;code&gt;AudioNode&lt;/code&gt;. Other examples of Audio Nodes are &lt;code&gt;BiquadFilter&lt;/code&gt;, &lt;code&gt;LowPassFilter&lt;/code&gt;, &lt;code&gt;AudioGainNode&lt;/code&gt; and many more. I will be covering some of them in part 2 of this mini series.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploring the V8 JS engine (Part 2 of 2)</title>
      <link>http://jcla1.com/blog/2012/01/08/exploring-the-v8-js-engine-part-2</link>
      <pubDate>Sun, 08 Jan 2012 00:00:00 +0100</pubDate>
      <author>Joseph Adams (whitegolem@gmail.com)</author>
      <guid>http://jcla1.com/blog/2012/01/08/exploring-the-v8-js-engine-part-2</guid>
      <description>&lt;h1 id='exploring_the_v8_js_engine_part_2_of_2'&gt;Exploring the V8 JS engine (Part 2 of 2)&lt;/h1&gt;

&lt;p class='meta'&gt; 08 Jan 2012 - Krefeld, Germany&lt;/p&gt;

&lt;p&gt;This is the second part of a 2 part series giving a simple technical overview of the V8 Javascript engine.&lt;/p&gt;

&lt;p&gt;In the &lt;a href='http://jcla1.com/blog/2012/01/07/exploring-the-v8-js-engine-part-1/'&gt;first part&lt;/a&gt; of this series I showed you how simple it is to get started with the V8 Javascript engine. In this second part we&amp;#8217;ll look into sharing objects and variables in a V8 program, as well as digging into the source of the popular (on V8 based) &lt;a href='http://nodejs.org/'&gt;Node.js&lt;/a&gt;, to see how variable/object sharing is implemented in a real world example.&lt;/p&gt;

&lt;p&gt;In V8 there are 2 types shared variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables where you can change the value&lt;/li&gt;

&lt;li&gt;Variables with an unchangeable value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: You are able to change the value of and unchangeable variable, but it will only be reflected in the Javascript (not the C++).&lt;/p&gt;

&lt;p&gt;For variables with an unchangeable value you only have to set the value. This is a bit trickier with shared variables that are changeable, for those you need &amp;#8220;Getter&amp;#8221; &amp;amp; &amp;#8220;Setter&amp;#8221; functions, that get called when the variable is accessed. I will cover both of those types below and then show them implemented in the Node.js source:&lt;/p&gt;

&lt;h2 id='variables_with_an_unchangeable_value'&gt;Variables with an unchangeable value&lt;/h2&gt;

&lt;p&gt;Based off our previous example, sharing an unchangeable variable is pretty simple. All you have to do is use the &lt;code&gt;Set(...)&lt;/code&gt; function to set the variable&amp;#8217;s value. Based off our &lt;a href='/blog/2012/01/07/exploring-the-v8-js-engine-part-1/#gist-1574928'&gt;previous example (part 1 of this series)&lt;/a&gt; this is quite easy to implement.&lt;/p&gt;

&lt;p&gt;This program will create the variable &lt;code&gt;pid&lt;/code&gt; in the Javascript&amp;#8217;s context:&lt;/p&gt;
&lt;script src='https://gist.github.com/1578321.js?file=share_variable_unchangeable.cc'&gt;
&lt;/script&gt;&lt;noscript&gt;
&lt;![CDATA[
	#include &lt;v8.h&gt;
	#include &lt;unistd.h&gt;
	// Include the header that contains the &quot;getpid()&quot; function
	
	using namespace v8;
	
	int main(int argc, char* argv[]) {
	
	// Create a stack-allocated handle scope.
	HandleScope handle_scope;
	
	Handle&lt;ObjectTemplate&gt; global_templ = ObjectTemplate::New();
	global_templ-&gt;Set(String::New(&quot;pid&quot;), Integer::New(getpid()));
	
	// Create a new context.
	Persistent&lt;Context&gt; context = Context::New(NULL, global_templ);
	
	// Enter the created context for compiling and
	// running the hello world script. 
	context-&gt;Enter();
	
	// Create a string containing the JavaScript source code.
	Handle&lt;String&gt; source = String::New(&quot;pid;&quot;);
	
	// Compile the source code.
	Handle&lt;Script&gt; script = Script::Compile(source);
	
	// Run the script to get the result.
	Handle&lt;Value&gt; result = script-&gt;Run();
	
	// Dispose the persistent context.
	context.Dispose();
	
	// Convert the result to an ASCII string and print it.
	String::AsciiValue ascii(result);
	printf(&quot;%s\n&quot;, *ascii);
	return 0;
	}
]]&gt;
&lt;/noscript&gt;
&lt;p&gt;If you save it in a file called &lt;code&gt;variable_share_unchangeable.cc&lt;/code&gt; (in &lt;code&gt;~/dev/v8/&lt;/code&gt;) you can compile and run it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ g++ -m32 -Iinclude libv8.a -lpthread variable_share_unchangeable.cc \
	-o variable_share_unchangeable&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;For more information on running and compiling see &lt;a href='http://jcla1.com/blog/2012/01/07/exploring-the-v8-js-engine-part-1/'&gt;the first post&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When this program is run it will print out its own &lt;code&gt;pid&lt;/code&gt;. The interesting thing about that is now though, that the &lt;code&gt;pid&lt;/code&gt; is accessed by the Javascript not the C++.&lt;/p&gt;

&lt;h2 id='variables_with_a_changeable_value'&gt;Variables with a changeable value&lt;/h2&gt;

&lt;p&gt;Defining variables that a C++ and Javascript program share, where you are able to change the value are a bit trickier. As I said before, you need to define a &amp;#8220;Getter&amp;#8221; and &amp;#8220;Setter&amp;#8221; for each variable you want to share. Here is a program that demonstrates the use of shared changeable variables:&lt;/p&gt;
&lt;script src='https://gist.github.com/1578321.js?file=share_variable_changeable.cc'&gt;
&lt;/script&gt;&lt;noscript&gt;
&lt;![CDATA[
	#include &lt;v8.h&gt;
	
	using namespace v8;
	
	// This is the variable we are going to share
	int x = 15;
	
	// Gets called when the value of x is requested
	Handle&lt;Value&gt; XGetter(Local&lt;String&gt; property, 
	                            const AccessorInfo&amp; info) {
	    // Create a new Javascript int from the
	    // current value of &quot;x&quot;                                
	    return Integer::New(x);
	}
	
	// Gets called when &quot;x&quot; is set to a new value
	void XSetter(Local&lt;String&gt; property, Local&lt;Value&gt; value, 
	                            const AccessorInfo&amp; info) {
	    // Change the value of the &quot;x&quot; in the C++
	    // to a 32-Bit representation of the value passed
	    x = value-&gt;Int32Value();
	}
	
	void CompileAndPrint(const Handle&lt;String&gt; source) {
	    // Compile the source code.
	    Handle&lt;Script&gt; script = Script::Compile(source);
	  
	    // Run the script to get the result.
	    Handle&lt;Value&gt; result = script-&gt;Run();
	
	    // Convert the result to an ASCII string and print it.
	    String::AsciiValue ascii(result);
	    printf(&quot;%s\n&quot;, *ascii);
	}
	
	int main(int argc, char* argv[]) {
	
	  // Create a stack-allocated handle scope.
	  HandleScope handle_scope;
	
	  // Create a new ObjectTemplate
	  Handle&lt;ObjectTemplate&gt; global_templ = ObjectTemplate::New();
	
	  // Set the XGetter and XSetter function
	  // to be called when the value of &quot;x&quot; is requested
	  // or &quot;x&quot; is set to a different value.
	  global_templ-&gt;SetAccessor(String::New(&quot;x&quot;), XGetter, XSetter);
	
	  // Create a new context.
	  Persistent&lt;Context&gt; context = Context::New(NULL, global_templ);
	  
	  // Enter the created context for compiling and
	  // running the hello world script. 
	  context-&gt;Enter();
	
	  // x is still equal to 15 here
	  Handle&lt;String&gt; s1 = String::New(&quot;x;&quot;);
	  CompileAndPrint(s1);
	  
	  // Here we change x to 250
	  Handle&lt;String&gt; s2 = String::New(&quot;x = 250;&quot;);
	  CompileAndPrint(s2);
	
	  // We print out x in C++ to see if the value has changed
	  printf(&quot;%d\n&quot;, x);
	  
	  // Dispose the persistent context.
	  context.Dispose();
	
	  return 0;
	}
]]&gt;
&lt;/noscript&gt;
&lt;p&gt;It seems a lot of code for just one variable, though as you will see in the Node.js source, once you use multiple variables you will hardly notice the surroundings.&lt;/p&gt;

&lt;h2 id='nodejs_source'&gt;Node.js source&lt;/h2&gt;

&lt;p&gt;Here we&amp;#8217;ll dig into where and how Node.js uses these shared variables. Specifically I will use the process object as an example. It is not necessary that you fully understand how the internals of Node.js work, all you need to know is that there is a &lt;code&gt;&lt;a href='https://github.com/joyent/node/blob/master/src/node.cc#L2694-2718'&gt;Start&lt;/a&gt;&lt;/code&gt; function right at the end of &lt;a href='https://github.com/joyent/node/blob/master/src/node.cc'&gt;this file&lt;/a&gt;, that calls another function, which then calls another function that sets up the process object. The name of this function is &lt;code&gt;&lt;a href='https://github.com/joyent/node/blob/master/src/node.cc#L2005-2140'&gt;SetupProcessObject&lt;/a&gt;&lt;/code&gt;. This function sets up, among others, the &lt;code&gt;pid&lt;/code&gt; variable that we had as an example. In the case of Node.js, this variable is unchangeable. An example of a changeable variable in Node.js is the &lt;code&gt;process.title&lt;/code&gt;, it is the name or the title of the current program. Try it out by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node
&amp;gt; process.title = &amp;quot;this_is_a_test&amp;quot;;
&amp;#39;this_is_a_test&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You won&amp;#8217;t notice a difference in node but if you look up the process name of node in Activity Monitor or Task Manager, etc. it will be &amp;#8220;this_is_a_test&amp;#8221; (without quotes):&lt;/p&gt;
&lt;img style='width:40em;' alt='img of top with node process' src='/img/exploring-v8-top.jpg' /&gt;
&lt;h2 id='end'&gt;End&lt;/h2&gt;

&lt;p&gt;That was a short overview of shared variables in the V8 Javascript engine. I didn&amp;#8217;t cover shared functions, because the post was that long already, but if you would like me to write a blog post about them too, just &lt;a href='mailto:whitegolem@gmail.com'&gt;email me at whitegolem@gmail.com&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploring the V8 JS engine (Part 1 of 2)</title>
      <link>http://jcla1.com/blog/2012/01/07/exploring-the-v8-js-engine-part-1</link>
      <pubDate>Sat, 07 Jan 2012 00:00:00 +0100</pubDate>
      <author>Joseph Adams (whitegolem@gmail.com)</author>
      <guid>http://jcla1.com/blog/2012/01/07/exploring-the-v8-js-engine-part-1</guid>
      <description>&lt;h1 id='exploring_the_v8_js_engine_part_1_of_2'&gt;Exploring the V8 JS engine (Part 1 of 2)&lt;/h1&gt;

&lt;p class='meta'&gt; 07 Jan 2012 - Krefeld, Germany&lt;/p&gt;

&lt;p&gt;This is the first part of a 2 part series giving a simple technical overview of the V8 Javascript engine.&lt;/p&gt;

&lt;p&gt;First of all some basic facts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developed and maintained by Google&lt;/li&gt;

&lt;li&gt;Javascript engine behind Google Chrome&lt;/li&gt;

&lt;li&gt;Also powers Node.js&lt;/li&gt;

&lt;li&gt;Really Fast!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;V8 is written in C++ so you should have basic understanding of OOP and some C/C++ knowledge wouldn&amp;#8217;t do bad too. The engine (V8) executes Javascript in so called &lt;code&gt;contexts&lt;/code&gt;, these are sandboxed and you can create multiple contexts in one V8 virtual machine (engine). This has the advantage that if you run 2 (or more) Javascript programs you don&amp;#8217;t have to worry about namespacing. The creation of these contexts is not as memory hungry as you may think, so don&amp;#8217;t worry about that. One of the great features of V8 is sharing C++ functions, objects and variables with Javascript, which we will cover in the second part of this series. To use V8 you write a C++ program that uses the V8 libs (to set up the contexts, scopes, templates) and then executes a string which is your Javascript program. You will understand how this works later in this post.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll take you through setting up the V8 lib and a simple &lt;code&gt;Hello World!&lt;/code&gt; program.&lt;/p&gt;

&lt;h2 id='downloading_and_building'&gt;Downloading and Building&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m using a Mac to build the library, but &lt;a href='http://code.google.com/p/v8/wiki/BuildingOnWindows'&gt;Windows is supported too&lt;/a&gt;. To build V8 you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subversion 1.4 or higher&lt;/li&gt;

&lt;li&gt;Python 2.4 or higher&lt;/li&gt;

&lt;li&gt;SCons 1.0.0 or higher&lt;/li&gt;

&lt;li&gt;GNU Compiler (GCC) 4.x.x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Downloading the source:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir ~/dev/
$ cd ~/dev/
$ svn checkout http://v8.googlecode.com/svn/trunk/ v8-read-only
$ mv v8-read-only v8&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have the source you can build the V8 library and header file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ scons
scons: Reading SConscript files ...
scons: done reading SConscript files.
scons: Building targets ...
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple isn&amp;#8217;t it? Now once the build has finished you should be able to see the &lt;code&gt;libv8.a&lt;/code&gt; file. This file is important for compiling the C++ program that uses the V8 library.&lt;/p&gt;

&lt;h2 id='your_first_v8_program'&gt;Your first V8 program&lt;/h2&gt;

&lt;p&gt;Now that you have all the parts needed for compiling a C++ program that uses the V8 classes, let&amp;#8217;s get to the interesting part.&lt;/p&gt;

&lt;p&gt;Here is a simple C++ program that runs the Javascript: &lt;code&gt;&quot;Hello World!&quot;;&lt;/code&gt;. Obviously, this is not a very spectacular Javascript program, but it should do to our needs. The comments explain what a each part does:&lt;/p&gt;
&lt;script src='https://gist.github.com/1574928.js?file=hello_world.cc'&gt;
&lt;/script&gt;
&lt;p&gt;Save that in a file called hello_world.cc in the &lt;code&gt;~/dev/v8/&lt;/code&gt; directory. Next you need to compile the &lt;code&gt;hello_world.cc&lt;/code&gt; file by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ g++ -m32 -Iinclude libv8.a -lpthread hello_world.cc -o hello_world&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This compiles the hello world program to a 32-bit executable that includes the &lt;code&gt;libv8.a&lt;/code&gt; library. If the compilation was successful you should have a new file called &lt;code&gt;hello_world&lt;/code&gt; in your V8 directory. Then you execute the file and it should print out &amp;#8220;Hello World!&amp;#8221; (without the quotes):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./hello_world
Hello World!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations you have just run your first program that uses V8.&lt;/p&gt;

&lt;p&gt;In the next part of this series we&amp;#8217;ll look into sharing variables and objects and dig into the source of Node.js.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using content providers in Android</title>
      <link>http://jcla1.com/blog/2012/01/03/using-content-providers-in-android</link>
      <pubDate>Tue, 03 Jan 2012 00:00:00 +0100</pubDate>
      <author>Joseph Adams (whitegolem@gmail.com)</author>
      <guid>http://jcla1.com/blog/2012/01/03/using-content-providers-in-android</guid>
      <description>&lt;h1 id='using_content_providers_in_android'&gt;Using content providers in Android&lt;/h1&gt;

&lt;p class='meta'&gt; 03 Jan 2012 - Krefeld, Germany&lt;/p&gt;

&lt;p&gt;In this blog post I&amp;#8217;ll show you how to get data stored on an Android phone using content providers. We&amp;#8217;ll write an app that fetches all the bookmarks and history from the phone&amp;#8217;s browser.&lt;/p&gt;

&lt;p&gt;Most Data in Android is exposed through so called &amp;#8220;Content Providers&amp;#8221;. The person who wrote a specific part of Android (i.e. the browser, but surely it wasn&amp;#8217;t just one person), could decide how to implement the storage. If he used SQLite or just a basic file or json, etc. It didn&amp;#8217;t matter because Google decided to let their developers implement these content providers so that there would be a standard way for developers like us, to access the data.&lt;/p&gt;

&lt;p&gt;In Android all the content providers are stored in the package: &lt;code&gt;android.provider.*;&lt;/code&gt; They are queried using their URIs and Cursors. Specifically the Browser&amp;#8217;s Bookmark and History content provider URI is in: &lt;code&gt;android.provider.Browser.BOOKMARKS_URI;&lt;/code&gt; (The name is a bit misleading, since it is the URI for &lt;i&gt;BOTH&lt;/i&gt; Bookmarks and History.) To retrieve data you need to find the names of the columns you want to retrieve and put them in an Array. You can find the package that contains the column definition for the bookmarks and history &lt;a href='http://developer.android.com/reference/android/provider/Browser.BookmarkColumns.html'&gt;here&lt;/a&gt;. &lt;p&gt;So let's get started!&lt;/p&gt; Let&amp;#8217;s first set up all the variables:&lt;/p&gt;
&lt;script src='https://gist.github.com/1554163.js?file=variables.java'&gt;
&lt;/script&gt;
&lt;p&gt;Now that we have the basic variables we can write the cursor. The function that creates it takes a lot of arguments. As you can see not many of these are important for us:&lt;/p&gt;
&lt;script src='https://gist.github.com/1554163.js?file=cursor.java'&gt;
&lt;/script&gt;
&lt;p&gt;Next we&amp;#8217;ll make a new onClick listener for the button. This listener basically loops through all the data rows and does something with them:&lt;/p&gt;
&lt;script src='https://gist.github.com/1554163.js?file=onclicklistener.java'&gt;
&lt;/script&gt;
&lt;p&gt;Now you have a list containing the bookmarks and history of a phones browser and you could for example send the urls to a server.&lt;/p&gt;
&lt;p&gt;You can download the whole Activity &lt;a href='https://raw.github.com/gist/1554163/7a0b4101462d4e0685289e6c0920b7e5c8d490a7/activity.java'&gt;here&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RSA public/private key encryption explained</title>
      <link>http://jcla1.com/blog/2011/12/10/rsa-public-private-key-encryption-explained</link>
      <pubDate>Sat, 10 Dec 2011 00:00:00 +0100</pubDate>
      <author>Joseph Adams (whitegolem@gmail.com)</author>
      <guid>http://jcla1.com/blog/2011/12/10/rsa-public-private-key-encryption-explained</guid>
      <description>&lt;h1 id='rsa_publicprivate_key_encryption_explained'&gt;RSA public/private key encryption explained&lt;/h1&gt;

&lt;p class='meta'&gt; 10 Dec 2011 - Krefeld, Germany&lt;/p&gt;

&lt;p&gt;In this blog post I&amp;#8217;ll show you how to calculate a simple RSA private-/public-key pair.&lt;/p&gt;

&lt;p&gt;First of all you need to know that each key (the public-key and the private-key) consists of 2 parts. The first part is different in each key, the second is equal in both. So let&amp;#8217;s start calculating!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Think of 2 prime numbers.&lt;/p&gt;

&lt;p&gt;In real openssl, these prime numbers are very high and have a similar bit-size. So that we have no problem doing the calculations I&amp;#8217;ll choose 2 numbers that are quite small:&lt;br /&gt; &lt;code&gt;p = 3, q = 11&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Calculate the modulus for the public/private key.&lt;/p&gt;

&lt;p&gt;This is the number that is the same in both keys, let&amp;#8217;s call it &lt;code&gt;n&lt;/code&gt;. It is used as the modulus in en- and decryption. You calculate it by doing: &lt;code&gt;n = 3*11&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Calculate the totient of n.&lt;/p&gt;

&lt;p&gt;Calculating the totient is easy. You could use a table and look up the value, but the calculation is just as easy and faster. Just do: &lt;code&gt;totient(n) = (p - 1) * (q - 1)&lt;/code&gt;. In our case we do: &lt;code&gt;totient(33) = (3 - 1) * (11 - 1)&lt;/code&gt;. This equals &lt;code&gt;20&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far we have: &lt;ul&gt;
     &lt;li&gt;&lt;code&gt;p = 3&lt;/code&gt;&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;q = 11&lt;/code&gt;&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;n = 33&lt;/code&gt;&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;totient(n) = 20&lt;/code&gt;&lt;/li&gt;
 &lt;/ul&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Choose a number for &lt;code&gt;e&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This number is is a bit harder than the others. It has to be between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, also coprime to &lt;code&gt;n&lt;/code&gt;. This basically means that the greatest common divisor of both numbers is &lt;code&gt;1&lt;/code&gt;. If you choose a prime number for &lt;code&gt;e&lt;/code&gt; all you need to do now is check that &lt;code&gt;e&lt;/code&gt; isn&amp;#8217;t a divisor of &lt;code&gt;n&lt;/code&gt;. I&amp;#8217;ll choose the number: &lt;code&gt;e = 17&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Calculating the modular multiplicative inverse of e * (mod totient(n))&lt;/p&gt;

&lt;p&gt;Now at first this sounds a bit overwhelming, I struggled a bit to find out what it means. Expressed in an easy way you could say: &amp;#8220;What is the solution to the equation:&lt;br /&gt; &lt;code&gt;(e * x - 1) mod (totient(n)) = 0&lt;/code&gt;&amp;#8221;. It would take quite long to work it out by hand so I wrote a small Javascript function that does the work for me: &lt;script src='https://gist.github.com/1453094.js?file=gistfile1.js'&gt;
 &lt;/script&gt; The function takes 2 arguments, one is &lt;code&gt;e&lt;/code&gt; the other is the &lt;code&gt;totient(n)&lt;/code&gt;. Depending on your processor and the size of the numbers you choose it can take longer or shorter to run. In our case the function will log the value &lt;code&gt;13&lt;/code&gt;, which I&amp;#8217;ll call &lt;code&gt;d&lt;/code&gt;. Now you have all the values needed for public-/private-key encryption or decryption.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Putting it all together&lt;/p&gt;

&lt;p&gt;All the values up to now: &lt;ul&gt;
     &lt;li&gt;&lt;code&gt;p = 3&lt;/code&gt;&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;q = 11&lt;/code&gt;&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;n = 33&lt;/code&gt;&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;totient(n) = 20&lt;/code&gt;&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;e = 17&lt;/code&gt;&lt;/li&gt;
     &lt;li&gt;&lt;code&gt;d = 13&lt;/code&gt;&lt;/li&gt;
 &lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Your public-key is now: &lt;code&gt;e = 17, n = 33&lt;/code&gt;&lt;br /&gt; Your private-key is now: &lt;code&gt;d = 13, n = 33&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With this private and public-key you can now encrypt data by doing this:&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll encrypt the value &lt;code&gt;9&lt;/code&gt;&lt;br /&gt; &lt;code&gt;m = 9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To encrypt with the public key, you take m to the power of e (in the public-key) mod n&lt;br /&gt; &lt;code&gt;m ^ e mod n&lt;/code&gt;&lt;br /&gt; &lt;code&gt;9 ^ 17 mod 33 = 15&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Our encrypted value is 15&lt;br /&gt; &lt;code&gt;c = 15&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This can only be decrypted with the private-key. To decrypt it, you take c to the power of d (in the private-key) mod n&lt;br /&gt; &lt;code&gt;c ^ d mod n&lt;/code&gt;&lt;br /&gt; &lt;code&gt;15 ^ 13 mod 33 = 9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we have our original value!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;WARNING:&lt;/strong&gt;&lt;/em&gt; The encryption in this tutorial has a very low security level, because of the low values of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;! To improve the security level choose higher primes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    

  </channel> 
</rss>